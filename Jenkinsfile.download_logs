agentLabel = "${AGENT}"

pipeline {
    agent { label agentLabel }

    parameters {
        string(name: 'REMOTE_SERVICE_URL', defaultValue: 'https://api.openshift.com', description: 'Service URL')

        string(name: 'DOWNLOAD_ALL', defaultValue: params.DOWNLOAD_ALL ?:'', description: 'Collect all logs (not only from failed clusters)')
        string(name: 'MUST_GATHER', defaultValue: params.MUST_GATHER ?:'--must-gather', description: 'Collect must-gather logs')
        string(name: 'AGENT', defaultValue: params.AGENT ?:'download_logs',  description: 'Agent to use')
        booleanParam(name: 'OPEN_TRIAGE_TICKETS', defaultValue: params.OPEN_TRIAGE_TICKETS ?:'true', description: 'Open triage tickets for failing installations')
    }

    triggers { cron('H/30 * * * *') }

    environment {
        SKIPPER_PARAMS = " "
        OFFLINE_TOKEN = credentials('admin_offline_token')
        JIRA_CREDS = credentials('Ronnie-jira')
        LOGS_DEST = "build"
        SLACK_TOKEN = credentials('slack-token')

    }
    options {
      timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Init') {
            steps {
                sh "make image_build"
            }
        }

        stage('Download logs') {
            steps {
                sh "make download_logs ${DOWNLOAD_ALL} ${MUST_GATHER}"
            }
        }

        stage('Open triage tickets') {
                when {
                    expression {${params.OPEN_TRIAGE_TICKETS}}
                }
                steps{
                    sh "skipper run discovery-infra/create_triage_tickets.py -up ${JIRA_CREDS}"
                }
        }
    }

    post {
        failure {
            script {
                def data = [text: "Attention! ${BUILD_TAG} job failed, see: ${BUILD_URL}"]
                writeJSON(file: 'data.txt', json: data, pretty: 4)
            }
            sh '''curl -X POST -H 'Content-type: application/json' --data-binary "@data.txt"  https://hooks.slack.com/services/${SLACK_TOKEN}'''
        }
    }
}
